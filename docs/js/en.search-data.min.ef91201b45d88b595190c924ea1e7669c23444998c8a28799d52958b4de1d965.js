'use strict';(function(){const indexCfg={};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create(indexCfg);window.geekdocSearchIndex=index;index.add({'id':0,'href':'/getting-started/','title':"Getting Started",'content':"High-level engines:\n Docker/Moby Podman  Image tools:\n BuildKit Umoci  Mid-level \u0026amp; Low-level runtimes:\n containerd runc  Others:\n LXC Singularity udocker Kubernetes  "});index.add({'id':1,'href':'/legal/','title':"Legal Notice",'content':"-- Copyright © rootlesscontaine.rs authors - rootlesscontaine.rs is free web site. The text is licensed under the CC BY-SA 4.0 license. Source Code.\nThis site uses hugo-geekdoc, which is licensed under the MIT license.\n"});index.add({'id':2,'href':'/getting-started/common/login/','title':"Login",'content':"Most Rootless Containers implementations need the $XDG_RUNTIME_DIR environmental variable to be set. When the environment variable is not set, features related to systemd and cgroups are unlikely to work properly.\nThe value is typically set to /run/user/$UID automatically by systemd or elogind on logging into the host.\nRun the following command to confirm:\n$ echo $XDG_RUNTIME_DIR /run/user/1000 The $XDG_RUNTIME_DIR environmental variable is set when:\n Logged in as a non-root user via the graphic console . Logged in as a non-root user via ssh \u0026lt;user\u0026gt;@\u0026lt;hostname\u0026gt; . Logged in as the root, and then switched to a non-root user via machinectl shell \u0026lt;user\u0026gt;@ .  The environmental variable is not set when:\n Logged in as the root, and then switched to a non-root user via su -l \u0026lt;user\u0026gt; Logged in as the root, and then switched to a non-root user via sudo -u \u0026lt;user\u0026gt;  TL;DR\nDon\u0026rsquo;t use su and sudo for switching from root to non-root.\nUse machinectl shell \u0026lt;user\u0026gt;@ or ssh \u0026lt;user\u0026gt;@localhost instead.\n [Optional] Start the systemd user session on boot To run containers automatically on system start-up, the following command needs to be executed.\n$ sudo loginctl enable-linger $(whoami) [Optional] Enable dbus user session Enabling dbus user session is typically needed for using systemd and cgroup v2.\n$ systemctl --user is-active dbus active  apt-get  $ sudo apt-get install -y dbus-user-session $ systemctl --user enable dbus $ systemctl --user start dbus   dnf  $ sudo dnf install -y dbus-daemon $ systemctl --user enable dbus $ systemctl --user start dbus    "});index.add({'id':3,'href':'/how-it-works/userns/','title':"User Namespaces",'content':"Rootless containers uses user_namespaces(7)(UserNS) for emulating fake privileges that are enough to create containers.\ne.g. map UID 1000 to pseudo-root UID 0 in the UserNS:\n$ whoami user1 $ id -u 1000 $ unshare --user --map-root-user # cat /proc/self/uid_map 0 1000 1 # cat /proc/self/gid_map 0 1000 1 # id -u 0 The pseudo-root user gains capabilities such as CAP_SYS_ADMIN and CAP_NET_ADMIN inside UserNS to perform fake-privileged operations such as creating mount namespaces, network namespaces, and creating TAP devices.\nHowever, this user does not gain any actual privilege that can interfere with other users' files and processes.\nsubuids \u0026amp; subgids, newuidmap \u0026amp; newgidmap Just mapping the single pseudo-root UID/GID is not enough to run containers that require multiple UIDs and GIDs. To map multiple UIDs and GIDs, Rootless Containers uses SETUID binaries called newuidmap and newgidmap. These binaries read configuration from files named /etc/subuid and /etc/subgid.\nIn the following example, 65,536 subuids (100000-165535) are allocated for a user named “user1”.\n$ cat /etc/subuid user1:100000:65536 These subuids are mapped in the UserNS as follows:\n   Host UID UserNS UID     1000 0   100000 1   100001 2   \u0026hellip; \u0026hellip;   165535 65536    The same applies to subgids defined in /etc/subgid.\nCreating a user namespace with newuidmap and newgidmap binaries are slightly complicated.\nRootlessKit provides a simple CLI that wraps these binaries:\n$ rootlesskit bash # cat /proc/self/uid_map 0 1000 1 1 100000 65536 # cat /proc/self/gid_map 0 1000 1 1 100000 65536 "});index.add({'id':4,'href':'/getting-started/common/','title':"Common steps (Read first!)",'content':"Setting up Rootless Containers doesn\u0026rsquo;t need the root privileges basically, but some specific configuration may need the root for the initial set-up.\n Logging in Configuring sysctl values /etc/subuid and /etc/subgid [Optional] cgroup v2  "});index.add({'id':5,'href':'/getting-started/common/sysctl/','title':"Configure sysctl",'content':"Debian, Arch, and RHEL/CentOS 7 are known to require reconfiguration of sysctl to enable User Namespaces.\nDebian GNU/Linux  Note\nThese steps are not needed for Ubuntu.\n Create /etc/sysctl.d/99-rootless.conf with the following content:\nkernel.unprivileged_userns_clone=1 And then run the following command to reload the new sysctl configuration:\n$ sudo sysctl --system Optional: To enable overlay filesystem, create /etc/modprobe.d/overlay.conf with the following content, and then reboot.\noptions overlay permit_mounts_in_userns=1   Arch Linux  Create /etc/sysctl.d/99-rootless.conf with the following content:\nkernel.unprivileged_userns_clone=1 Then run the following command to reload the new sysctl configuration:\n$ sudo sysctl --system   RHEL/CentOS 7  Note\nThese steps are not needed for RHEL/CentOS 8.\n Create /etc/sysctl.d/99-rootless.conf with the following content:\nuser.max_user_namespaces=28633 Then run the following command to reload the new sysctl configuration:\n$ sudo sysctl --system    [Optional] allowing ping Most distributions do not allow non-root users cannot send ICMP Echo Request packets (aka ping) by default.\nTo allow running ping without root, create /etc/sysctl.d/99-rootless.conf with the following content:\nnet.ipv4.ping_group_range = 0 2147483647 Then run the following command to reload the new sysctl configuration:\n$ sudo sysctl --system [Optional] allowing listening on TCP \u0026amp; UDP ports below 1024 Most distributions do not allow non-root users to listen on TCP \u0026amp; UDP ports below 1024. e.g. listening on 80/tcp would fail with \u0026ldquo;permission denied\u0026rdquo;, while listening on 8080/tcp would success.\nTo allow running ping without root, create /etc/sysctl.d/99-rootless.conf with the following content:\nnet.ipv4.ip_unprivileged_port_start=0 Then run the following command to reload the new sysctl configuration:\n$ sudo sysctl --system "});index.add({'id':6,'href':'/getting-started/docker/','title':"Docker/Moby",'content':"Rootless Docker/Moby was initially proposed in early 2018 and has been merged to the Docker/Moby upstream since Docker 19.03.\nDocker 19.03 provides almost full features for Rootless mode, including support for port fowarding (docker run -p) and multi-container networking (docker network create), but it doesn\u0026rsquo;t support limiting resources with cgroup v2.\nThe cgroup v2 support has been already merged into the opensource Moby upstream, but it is not yet officially released as a Docker-branded product. It is planned to be released as Docker 20.X.\nInstallation Note\nPlease read the common steps first.\nEspecially, make sure $XDG_RUNTIME_DIR to be set properly.\n The official installation script can be executed by a non-root user without sudo.\nStable (v19.03)  $ curl -fsSL https://get.docker.com/rootless | sh   Nightly (v20)  $ curl -fsSL https://get.docker.com/rootless | CHANNEL=nightly sh   RPMs/DEBs  Docker v20.X will officially provide docker-ce-rootless-extras RPMs and DEBs, which can be installed by the root for all the users on the host.\nSee https://github.com/AkihiroSuda/moby-snapshot for unofficial snapshot builds.\nAfter installing RPMs/DEBS, run the following command as a non-root user to create the systemd user-instance unit:\n$ dockerd-rootless-setuptool.sh install    Usage $ export PATH=$HOME/bin:$PATH $ export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock $ docker run hello-world To start/stop the daemon, use systemctl --user \u0026lt;start|stop\u0026gt; docker instead of systemctl \u0026lt;start|stop\u0026gt; docker. The systemd unit file is located as ~/.config/systemd/user/docker.service.\nTips Enabling resource limitations (docker run --cpus, docker run --memory, \u0026hellip;) Resource-related flags of docker run, such as --cpus, --memory, --blkio-weight, and --pids-limit can be used only when the following conditions are satisfied:\n Docker/Moby version is 20 or later containerd version is 1.4 or later runc version is 1.0-rc91 or later The host is running with cgroup v2 The host is running with systemd  To impose resource limitations without cgroup, see https://docs.docker.com/engine/security/rootless/#limiting-resources\nChanging the network stack Docker/Moby uses slirp4netns as the default network stack if slirp4netns v0.4.0 or later is installed. Otherwise it falls back to VPNKit.\nIf slirp4netns is not installed on your host, download the official slirp4netns binary to ~/bin so that Docker/Moby can pick it up automatically. The functionalities are same as VPNKit, but slirp4netns is known to have better throughput. However, slirp4netns is not included in the Docker package because they did not want to distribute slirp4netns\u0026rsquo;s GPL2 binary along with Apache License 2.0 binaries.\nDocker/Moby also supports lxc-user-nic SETUID binary experimentally: https://docs.docker.com/engine/security/rootless/#changing-the-network-stack\nChanging the port forwarder Docker/Moby uses RootlessKit as the default port forwarder.\nHowever, as explained in How it works, sometimes slirp4netns port forwarder is preferred over RootlessKit port forwarder.\nTo change the port forwarder to slirp4netns, add the following line to the [Service] section of ~/.config/systemd/user/docker.service:\nEnvironment=DOCKERD_ROOTLESS_ROOTLESSKIT_PORT_DRIVER=slirp4netns And then restart the daemon:\n$ systemctl --user daemon-reload $ systemctl --user restart docker Starting containers on boot You need to run sudo loginctl enable-linger .... See Getting Started/Login.\nResetting to factory settings Run the following commands to remove all containers and configurations:\n$ systemctl --user stop docker $ systemctl --user disable docker $ rm -f ~/.config/systemd/user/docker.service $ ~/bin/rootlesskit rm -rf ~/.local/share/docker ~/.config/docker To uninstall binaries, remove the following files under ~/bin:\ncontainerd containerd-shim containerd-shim-runc-v2 ctr docker docker-init docker-proxy dockerd dockerd-rootless-setuptool.sh dockerd-rootless.sh rootlesskit rootlesskit-docker-proxy runc vpnkit Further information See https://docs.docker.com/engine/security/rootless/\n"});index.add({'id':7,'href':'/how-it-works/','title':"How it works",'content':"This section explains how Rootless Containers work under the hood.\n User Namespaces: for emulating root privileges that are needed for running containers Network Namespaces: for isolating network connections and IPC sockets OverlayFS: for deduplicating files Cgroups: for limiting consumption of CPUs, memory, IO, and PIDs.  "});index.add({'id':8,'href':'/how-it-works/netns/','title':"Network Namespaces",'content':" Outgoing connections: routing packets outgoing to the Internet Incoming connections: forwarding packets incoming from the Internet  "});index.add({'id':9,'href':'/how-it-works/netns/outgoing/','title':"Outgoing connections",'content':"Unsharing network namespaces isn\u0026rsquo;t only for assigning IP addresses; it is also essential to protect abstract UNIX sockets on the host from containerized processes.\nHowever, unsharing network namespaces for Rootless Containers isn\u0026rsquo;t straightforward, because vEth pairs cannot be created across UserNS boundaries without the privilege.\nLXC uses a SETUID binary called lxc-user-nic for setting up vEth pairs.\nOther implementations including Docker/Moby and Podman typically use TAP devices instead of vEth pairs, and run a usermode network stack called slirp, which translates Ethernet packets to unprivileged socket system calls.\nSETUID binary LXC uses a SETUID binary called lxc-user-nic for setting up vEth pairs.\nExecuting lxc-user-nic needs configuration per user to be added in /etc/lxc/lxc-usernet.\nlxc-user-nic is also experimentally supported by RootlessKit which is used by several projects including Docker/Moby and BuildKit.\nslirp Several slirp implementations are used by Rootless Containers:\n slirp4netns VPNKit  slirp4netns is known to have significantly better throughput than VPNKit.\nDocker/Moby uses slirp4netns by default when slirp4netns is installed. Otherwise falls back to VPNKit.\nPodman only supports slirp4netns.\n"});index.add({'id':10,'href':'/getting-started/podman/','title':"Podman",'content':"The following table shows the feature implementation status of Rootless Podman:\n   Version Notable changes     Pre-1.1 Initial support for Rootless mode   1.1 Added support for port forwarding (podman run -p)   1.5 Added support for cgroup v2   2.1 Added support for multi-container networking (podman create network)    FAQ: Docker/Moby vs Podman?\nUntil recently, Docker/Moby had lacked support for cgroup v2, and on the other hand Podman had lacked support for multi-container networking.\nAs of October 2020, the two projects implement almost the same features with regard to the support for Rootless mode.\n Installation Note\nPlease read the common steps first.\n The easiest way to install Rootless Podman is to install podman package. Requires sudo.\napt-get  See here  dnf  $ sudo dnf install -y podman    Rootless Podman could also be installed without sudo in theory. However, as of October 2020, there is no official Podman binaries that can be installed without sudo.\nUsage Just run podman command.\n$ podman run docker.io/library/hello-world Tips Enabling resource limitations (podman run --cpus, podman run --memory, \u0026hellip;) Resource-related flags of podman run, such as --cpus, --memory, --blkio-weight, and --pids-limit can be used only when the following conditions are satisfied:\n Podman version is 1.5 later runc version is 1.0-rc91 or later, or crun is installed The host is running with cgroup v2 The host is running with systemd  To impose resource limitations without cgroup, see https://docs.docker.com/engine/security/rootless/#limiting-resources (read docker as podman)\nChanging the port forwarder Podman uses RootlessKit as the default port forwarder.\nHowever, as explained in How it works, sometimes slirp4netns port forwarder is preferred over RootlessKit port forwarder.\nTo change the port forwarder to slirp4netns, run podman run with --network slirp4netns:port_handler=slirp4netns.\nSee also http://docs.podman.io/en/latest/markdown/podman-run.1.html\nStarting containers on boot As Podman lacks the central daemon, you need to create systemd unit files to launch the each of the containers on the system startup.\nSee http://docs.podman.io/en/latest/markdown/podman-generate-systemd.1.html\nAlso, you need to run sudo loginctl enable-linger .... See Getting Started/Login.\nResetting to factory settings Run the following commands to remove all containers and configurations:\n$ podman rm -f $(podman ps -a -q) $ podman unshare rm -rf ~/.local/share/containers ~/.config/containers To uninstall binaries, remove podman package with the package manager.\nFurther information See https://github.com/containers/podman/blob/master/docs/tutorials/rootless_tutorial.md\n"});index.add({'id':11,'href':'/getting-started/buildkit/','title':"BuildKit",'content':"Note\nPlease read the common steps first.\n See https://github.com/moby/buildkit/blob/master/docs/rootless.md\n"});index.add({'id':12,'href':'/getting-started/umoci/','title':"Umoci",'content':"See https://umo.ci/quick-start/rootless/\n"});index.add({'id':13,'href':'/getting-started/common/subuid/','title':"/etc/subuid and /etc/subgid",'content':"Rootless Containers implementations mostly expect /etc/subuid to contain at least 65,536 subuids.\nIn the following example, 65,536 subuids (100000-165535) are allocated for a user named \u0026ldquo;user1\u0026rdquo;.\n$ cat /etc/subuid user1:100000:65536 The same applies to subgids defined in /etc/subgid. See also How it works/User Namespaces.\nThese subuids and subgids are typically automatically configured by the system.\nIf subuids and subgids are not configured, you need to edit /etc/subuid and /etc/subgid directly with a text editor:\n$ sudo vi /etc/subuid newuidmap and newgidmap newuidmap and newgidmap needs to be installed on the host. These binaries are typically installed by default.\napt-get  $ sudo apt-get install -y uidmap   dnf  $ sudo dnf install -y shadow-utils    "});index.add({'id':14,'href':'/getting-started/containerd/','title':"containerd",'content':"Note\nPlease read the common steps first.\n See https://github.com/containerd/containerd/blob/master/docs/rootless.md\n"});index.add({'id':15,'href':'/how-it-works/netns/incoming/','title':"Incoming connections",'content':"Connections incoming from the Internet cannot directly reach network namespaces.\nTwo forwarder implementations are used for transferring connections to Rootless Containers' network namespaces.\nRootlessKit The RootlessKit implementation is used by both Docker/Moby and Podman.\nslirp4netns slirp4netns also has its own port forwarder.\nThe slirp4netns implementation is slower than RootlessKit, however, the slirp4netns implementation can keep source IP addresses, while the RootlessKit implementation treats all connections as if they were from 127.0.0.1.\nThe slirp4netns implementation is often preferred for recording access logs of public Web servers.\nDocker/Moby and Podman optionally support using slirp4netns port forwarder.\n"});index.add({'id':16,'href':'/how-it-works/overlayfs/','title':"OverlayFS",'content':"The upstream kernel still doesn\u0026rsquo;t support mounting OverlayFS inside UserNS, though Ubuntu and Debian support it by patching the kernel.\nOn other distros, Rootless Containers typically use fuse-overlayfs instead of the real OverlayFS.\n"});index.add({'id':17,'href':'/getting-started/common/cgroup2/','title':"[Optional] cgroup v2",'content':"Note\nEnabling cgroup v2 is optional.\n Enabling cgroup v2 is often needed for running Rootless Containers with limiting the consumption of the CPU, memory, I/O, and PIDs resources, e.g. docker run --memory 32m.\nNote that cgroup is not needed for just limiting resources with traditional ulimit and cpulimit, though they work in process-granularity rather than in container-granularity. See here for the further information.\nChecking whether cgroup v2 is already enabled If /sys/fs/cgroup/cgroup.controllers is present on your system, you are using v2, otherwise you are using v1.\nAs of October 2020, Fedora (since 31) is the only well-known distribution that uses cgroup v2 by default.\nEnabling cgroup v2 Enabling cgroup v2 for containers require kernel 4.15 or later. Kernel 5.2 or later is recommended.\nAnd yet, delegating cgroup v2 controllers to non-root users requires the recent version of systemd. systemd 244 or later is recommended.\nTo boot the host with cgroup v2, add the following string to the GRUB_CMDLINE_LINUX line in /etc/default/grub and then run sudo update-grub.\nsystemd.unified_cgroup_hierarchy=1 Enabling CPU, CPUSET, and I/O delegation By default, a non-root user can only get memory controller and pids controller to be delegated.\n$ cat /sys/fs/cgroup/user.slice/user-$(id -u).slice/user@$(id -u).service/cgroup.controllers memory pids To allow delegation of other controllers such as cpu, cpuset, and io, run the following commands:\n$ sudo mkdir -p /etc/systemd/system/user@.service.d $ cat \u0026lt;\u0026lt;EOF | sudo tee /etc/systemd/system/user@.service.d/delegate.conf [Service] Delegate=cpu cpuset io memory pids EOF $ sudo systemctl daemon-reload Delegating cpuset is recommended as well as cpu, but delegating cpuset requires systemd 244 or later.\n"});index.add({'id':18,'href':'/caveats/','title':"Caveats and Future work",'content':"  The user namespace implementation in the kernel tends to have vulnerabilities.\n  Setting up subuid and subgid is sometimes a mess, especially on LDAP/AD environments.\n Our experiment to run containers without mapping subuid/subgid: https://github.com/rootless-containers/subuidless Idea to manage subuid/subgid using LDAP: https://github.com/shadow-maint/shadow/issues/154    slirp is slow. lxc-user-nic could be used instead, but its /etc/lxc/lxc-usernic configuration is a mess.\n  Can\u0026rsquo;t mount block devices such as iSCSI\n LKL could be used to implement FUSE mounters for them    NFS lacks support for user-namespaced CAP_DAC_OVERRIDE: https://www.redhat.com/sysadmin/rootless-podman-nfs\n  "});index.add({'id':19,'href':'/getting-started/runc/','title':"runc",'content':"Note\nPlease read the common steps first.\n See https://github.com/opencontainers/runc/#rootless-containers\n"});index.add({'id':20,'href':'/how-it-works/cgroups/','title':"Cgroups",'content':"v1 Delegating cgroup v1 controllers to non-root users is not considered to be safe. So, most Rootless Containers implementations do not support using cgroups on cgroup v1 hosts.\nHowever, LXC supports delegating cgroup v1 to non-root users by using a PAM module called pam_cgfs.\nv2 Unlike cgroup v1, cgroup v2 officially supports delegation. Most Rootless Containers implementations rely on systemd for delegating v2 controllers to non-root users. See Getting Started/Common/Cgroup v2 for the actual configuration.\n"});index.add({'id':21,'href':'/getting-started/lxc/','title':"LXC",'content':"Note\nPlease read the common steps first.\n Running unprivileged LXC To be documented.\n"});index.add({'id':22,'href':'/getting-started/singularity/','title':"Singularity",'content':"Note\nPlease read the common steps first.\n Singularity provides two modes for running containers as a non-root user:\n SETUID mode Fakeroot mode  The former one does not fall into the scope of Rootless Containers, as the actual runtime binary gains the root privileges via the SETUID bit.\nThe latter one falls into our scope, but it should be noted that it does not support creating network namespaces with Internet connectivity.\nThis means that you can\u0026rsquo;t protect the abstract sockets on the host (such as D-Bus sockets) from being connected from containerized processes, unless you disable Internet connectivity.\nSingularity fake-root mode See https://sylabs.io/guides/3.6/user-guide/fakeroot.html\n"});index.add({'id':23,'href':'/getting-started/udocker/','title':"udocker",'content':"Note\nPlease read the common steps first.\n Note\nudocker is not Docker.\n udocker provides four modes for running containers as a non-root user:\n Pn: Proot mode Fn: fakechroot mode Rn: rootless runc mode Sn: Singularity mode  The third mode (Rn) falls into the scope of Rootless Containers, but the others are not: Pn and Fn are not containers (in our view), and Sn requires SETUID bit.\nFor futher information, see https://github.com/indigo-dc/udocker/\n"});index.add({'id':24,'href':'/glossary/','title':"Glossary",'content':"This page explains the jargons about Rootless Containers.\nOpen an issue to request explaining more.\nC Cgroup Control groups, used for limiting resource usage of containers.\nUse of cgroups is considered to be optional for Rootless Containers.\nD Delegation In the context of Cgroup, delegation means allowing non-root users to modify Cgroup configuration to impose limits on consumption of CPU, memory, I/O, and PIDs.\nDelegation typically needs cgroup v2 and systemd.\nF FUSE Filesystem in User Space.\nWhile mounting kernel-mode filesystems inside User Namespaces is almost unsupported, mounting FUSE is supported since kernel 4.18.\nFUSE-OverlayFS A FUSE implementation of OverlayFS.\nWeb site: https://github.com/containers/fuse-overlayfs\nSee How it works/OverlayFS.\nN Network Namespaces See How it works/Network Namespaces.\nnewuidmap \u0026amp; newgidmap See How it works/User Namespaces.\nL lxc-user-nic See How it works/Network Namespaces/Outgoing Connections.\nR rootless-cni-infra A sandbox container used for implementing multi-container networking for Podman.\nWeb site: https://github.com/containers/podman/tree/master/contrib/rootless-cni-infra\nRootless Containers When we say Rootless Containers, it means running the entire container runtime as well as the containers without the root privileges.\nEven when the containers are running as non-root users, when the runtime is still running as the root, we don’t call them Rootless Containers.\nSee the top page for the further information.\nRootlessKit RootlessKit is a tool that helps setting up User Namespaces with slirp and port forwarding.\nWeb site: https://github.com/rootless-containers/rootlesskit\nS SETUID A binary file with SETUID bit is executed as the file owner. SETUID is typically used for allowing non-root users to execute specific binary with the root privileges.\nExecuting SETUID binaries is dangerous; Rootless Containers typically do not use any SETUID binary, with a small number of exceptions such as newuidmap and newgidmap.\nslirp A technique to translate Ethernet packets to unprivileged TCP/IP socket syscalls. Widely used by virtual machine implementations such as QEMU and Rootless Container implementations.\nNote that the modern usage of \u0026ldquo;slirp\u0026rdquo; has signifantly changed since the original release of \u0026ldquo;slirp\u0026rdquo; in 1995. The original slirp in 1995 was used for connecting PCs w/o Ethernet devices to the Internet via a dial-up shell account, by emulating SLIP/PPP.\nAs of 2020, \u0026ldquo;slirp\u0026rdquo; is rarely used in conjunction with SLIP/PPP.\nSee also How it works/Network Namespaces.\nslirp4netns Our implementation of slirp optimized for Rootless Containers. Used by Docker/Moby (when installed) and Podman.\nWeb site: https://github.com/rootless-containers/slirp4netns\nSee also How it works/Network Namespaces.\nsubuid \u0026amp; subgid See How it works/User Namespaces.\nU Unprivileged In the context of containers, \u0026ldquo;unprivileged\u0026rdquo; can have (at least) three different meanings:\n Running a Docker/Podman container without docker run --privileged, or running a Kubernetes container without securityContext.privileged=true Running a LXC container as a non-root user (and by a non-root user, typically) Running a LXD container as a non-root user but keep the LXD daemon running as the root  Only the second meaning falls into the scope of Rootless Containers.\nUser Namespaces See How it works/User Namespaces.\nVPNKit An OCaml implementation of slirp, used by Rootless Docker/Moby when slirp4netns is not installed.\nAside from Rootless Docker/Moby, VPNKit is also used by Docker for Mac/Win for connecting the LinuxKit VM to the Internet.\nSee also How it works/User Namespaces.\nWeb site: https://github.com/moby/vpnkit\nX XDG_RUNTIME_DIR The equivalent of /var/run for non-root users. Typically set to /run/user/$UID.\nSee Getting Started/Common/Login\n"});index.add({'id':25,'href':'/about-us/','title':"About us",'content':"This site is maintained by:\n Aleksa Sarai (SUSE) Akihiro Suda (NTT) Giuseppe Scrivano (Red Hat)  This site was originally launched by Aleksa in 2017 for the sake of collecting open questions and unresolved issues.\n"});index.add({'id':26,'href':'/getting-started/kubernetes/','title':"Kubernetes",'content':"Note\nPlease read the common steps first.\n We have been proposing our patchset for supporting Rootless mode to the Kubernetes upstream, but our proposal has not been merged yet: https://github.com/kubernetes/enhancements/pull/1371\nUsernetes Usernetes is our reference Kubernetes distribution to support Rootless mode.\nSee https://github.com/rootless-containers/usernetes\n$ tar xjvf usernetes-x86_64.tbz $ cd usernetes $ ./install.sh --cri=containerd --cgroup-manager=systemd $ export KUBECONFIG=\u0026quot;$HOME/.config/usernetes/master/admin-localhost.kubeconfig\u0026quot; $ kubectl apply -f manifests/*.yaml k3s k3s supports Rootless mode using our Usernetes patchset.\n$ k3s server --rootless See also https://rancher.com/docs/k3s/latest/en/advanced/#running-k3s-with-rootlesskit-experimental\n"});index.add({'id':27,'href':'/categories/','title':"Categories",'content':""});index.add({'id':28,'href':'/','title':"Rootless Containers",'content':"Rootless containers refers to the ability for an unprivileged user to create, run and otherwise manage containers. This term also includes the variety of tooling around containers that can also be run as an unprivileged user.\n\u0026ldquo;Unprivileged user\u0026rdquo; in this context refers to a user who does not have any administrative rights, and is \u0026ldquo;not in the good graces of the administrator\u0026rdquo; (in other words, they do not have the ability to ask for more privileges to be granted to them, or for software packages to be installed).\nPros:\n Can mitigate potential container-breakout vulnerabilities (Not a panacea, of course) Friendly to shared machines, especially in HPC environments  Cons:\n Complexity  See also Caveats and Future work.\nWhat are Rootless Containers and what are not? When we say Rootless Containers, it means running the entire container runtime as well as the containers without the root privileges.\nEven when the containers are running as non-root users, when the runtime is still running as the root, we don\u0026rsquo;t call them Rootless Containers.\nWhile we allow using SETUID (and/or SETCAP) binaries for some of essential configurations such as newuidmap, when the entire runtime is running with SETUID, we don\u0026rsquo;t call it Rootless Containers.\nExamples of Rootless Containers  Docker rootless-mode Podman rootless-mode BuildKit rootless-mode LXC unprivileged-mode Singularity fakeroot-mode  Click the links for tutorials.\nNon-examples of Rootless Containers  Allowing a non-root user to access to /var/run/docker.sock, by adding the user to docker group (sudo usermod -aG docker somebody) docker run --user somebody Docker userns-remap mode (dockerd --userns-remap) Podman userns-remap mode (podman run --uidmap) Kaniko Makisu LXD unprivileged-mode Singularity SETUID-mode  "});index.add({'id':29,'href':'/tags/','title':"Tags",'content':""});})();